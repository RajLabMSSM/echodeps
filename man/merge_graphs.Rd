% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/merge_graphs.R
\name{merge_graphs}
\alias{merge_graphs}
\title{Merge graphs}
\usage{
merge_graphs(
  graph_list,
  node_size,
  output = c("tidygraph", "igraph"),
  by = "ref",
  verbose = TRUE
)
}
\arguments{
\item{graph_list}{A list of graphs.}

\item{node_size}{Strategy for setting node sizes. Can be one of:
\itemize{
\item{NULL : }{Sets the target package node's size to 40 and the rest to 30}.
\item{<numeric> : }{User-provided node size.
Sets all nodes to the same size.}
\item{<character> : }{User-provided metadata column name.
Scales node size to a vector of numeric values in the node metadata.}
}}

\item{output}{Output format to return the graph in.}

\item{by}{A join specification created with \code{\link[dplyr:join_by]{join_by()}}, or a character
vector of variables to join by.

If \code{NULL}, the default, \verb{*_join()} will perform a natural join, using all
variables in common across \code{x} and \code{y}. A message lists the variables so
that you can check they're correct; suppress the message by supplying \code{by}
explicitly.

To join on different variables between \code{x} and \code{y}, use a \code{\link[dplyr:join_by]{join_by()}}
specification. For example, \code{join_by(a == b)} will match \code{x$a} to \code{y$b}.

To join by multiple variables, use a \code{\link[dplyr:join_by]{join_by()}} specification with
multiple expressions. For example, \code{join_by(a == b, c == d)} will match
\code{x$a} to \code{y$b} and \code{x$c} to \code{y$d}. If the column names are the same between
\code{x} and \code{y}, you can shorten this by listing only the variable names, like
\code{join_by(a, c)}.

\code{\link[dplyr:join_by]{join_by()}} can also be used to perform inequality, rolling, and overlap
joins. See the documentation at \link[dplyr:join_by]{?join_by} for details on
these types of joins.

For simple equality joins, you can alternatively specify a character vector
of variable names to join by. For example, \code{by = c("a", "b")} joins \code{x$a}
to \code{y$a} and \code{x$b} to \code{y$b}. If variable names differ between \code{x} and \code{y},
use a named character vector like \code{by = c("x_a" = "y_a", "x_b" = "y_b")}.

To perform a cross-join, generating all combinations of \code{x} and \code{y}, see
\code{\link[dplyr:cross_join]{cross_join()}}.}

\item{verbose}{Print messages.}
}
\value{
Merge \link[tidygraph]{tbl_graph} or \link[igraph]{igraph}.
}
\description{
Merge a list of graphs into a single graph.
Can take in a list of \link[igraph]{igraph}s or
a list of \link[igraph]{igraph}s,
and can return a merged
 \link[tidygraph]{tbl_graph} or a merged \link[igraph]{igraph}.
}
\examples{
set.seed(2023)
graph_list <- example_graphs()
g <- merge_graphs(graph_list)
plot(g, edge.label=igraph::E(g)$color)
}
